/**
*
* {{ properCase name }}
*
*/

import React from 'react';
import PropTypes from 'prop-types';
import { injectIntl } from 'react-intl';
import { connect } from 'react-redux';
import { createPropsSelector } from 'reselect-immutable-helpers';
import { reduxForm } from 'redux-form/immutable';
import pick from 'lodash/pick';

import {
  selectAuthUserId,
  selectIsLoading,
} from 'containers/src/selectors';
import {
  loadFormAction,
  updateFormAction,
  uploadFileFormAction,
} from 'containers/src/actions';
import Button from 'components/Button';
import formValidators from 'utils/formValidators';
import * as FormField from 'forms/formFields/AntDesign';
{{#if wantMessages}}
import TranslatedMessage{{#if wantHeaders}}, { formatMessage }{{/if}} from 'components/TranslatedMessage';

import messages from './messages';
{{/if}}
import './style.scss';

const { isRequired } = formValidators;

const formFieldsObject = {
  firstName: {
    type: 'textInput',
    validate: [isRequired],
    hasLabel: false,
    placeholder: 'firstName',
  },
  age: {
    type: 'numberInput',
    validate: [isRequired],
    hasLabel: false,
    placeholder: 'age',
  },
  sampleSelectInput: {
    type: 'selectInput',
    validate: [isRequired],
    placeholder: 'sampleSelectInput',
    formItemLayout: {
      labelCol: { span: 24 },
      wrsrcerCol: { span: 6 },
    },
    options: [
      { label: 'Hello', value: 'hello' },
      { label: 'World', value: 'world' },
    ],
  },
  sampleSwitch: {
    type: 'switchButton',
    validate: [isRequired],
    placeholder: 'sampleSwitch',
    formItemLayout: {
      labelCol: { span: 24 },
      wrsrcerCol: { span: 6 },
    },
  },
};

class {{ properCase name }} extends React.Component {
  componentDidMount() {
    this.props.onMount(this.props);
  }

  componentWillReceiveProps() {
    if (this.props.authUserId === null && this.props.authUserId !== nextProps.authUserId) {
      this.props.onMount(this.props);
    }
  }

  render() {
    const { handleSubmit, submitting, ...otherProps } = this.props;
    const groups = {
      sample: pick(formFieldsObject, 'sampleTextInput', 'sampleNumberInput', 'sampleSelectInput', 'sampleSwitch'),
    };
    const keys = Object.keys(groups);

    return (
      <form onSubmit={handleSubmit} className="{{  kebabCase name }}">
        {{#if wantMessages}}
        <TranslatedMessage messages={messages} messageId="header" />
        {{/if}}
        {Object.values(groups).map((group, i) =>
          <FormField.Group fieldsObject={group} key={keys[i]} {...otherProps} />
        )}
        <div className="text-center">
          <Button htmlType="submit" type="primary" disabled={submitting} label="hello" width="100%" />
        </div>
      </form>
    );
  }
}

// change to your dataBase point
const getFirebaseEndPoint = (props) => ['users', props.authUserId];
// change to your redux point
const getReduxEndPoint = (props) => ['src', 'users', props.authUserId];

{{ properCase name }}.propTypes = {
  handleSubmit: PropTypes.func.isRequired,
  submitting: PropTypes.bool,
  onMount: PropTypes.func,
  isLoading: PropTypes.bool,
  authUserId: PropTypes.string,
};

const mapStateToProps = createPropsSelector({
  authUserId: selectAuthUserId,
  isLoading: selectIsLoading,
});

function mapDispatchToProps(dispatch) {
  return {
    onMount: (props) => dispatch(loadFormAction(getFirebaseEndPoint(props), getReduxEndPoint(props))),
    onSubmit: (formMap, _dispatch, props) => {
      if (props.onHide) props.onHide();
      return dispatch(updateFormAction(formMap, getFirebaseEndPoint(props), getReduxEndPoint(props)));
    },
    onUpload: (fileName, fileBlob, fieldName, props) => dispatch(uploadFileFormAction(fileName, fileBlob, fieldName, getReduxEndPoint(props), getFirebaseEndPoint(props))),
  };
}

const form = injectIntl(reduxForm({
  form: '{{ properCase name }}',
  destroyOnUnmount: false,
  enableReinitialize: true,
})({{ properCase name }}));

const connectedForm = connect((state, props) => ({
  initialValues: state.getIn(getReduxEndPoint(props)),
}))(form);

export default connect(mapStateToProps, mapDispatchToProps)(connectedForm);
