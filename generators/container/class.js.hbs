/**
 *
 * {{properCase name }} Container
 *
 */

import React from 'react';
import PropTypes from 'prop-types';
import { Actions } from 'react-native-router-flux';
import { compose } from 'redux';
import { connect } from 'react-redux';
{{#if wantActionsAndReducer}}
import { createPropsSelector } from 'reselect-immutable-helpers';
{{/if}}
import {
  Container,
  Content,
  Text,
} from 'native-base';

{{#if wantHeader}}
import AppHeader from '../../components/AppHeader';
{{/if}}
{{#if wantFooter}}
import AppFooter from '../../components/AppFooter';
{{/if}}

{{#if wantActionsAndReducer}}
import injectReducer from '../../utils/injectReducer';
{{/if}}
{{#if wantSaga}}
import injectSaga from '../../utils/injectSaga';
{{/if}}

{{#if wantSaga}}
import sagas from './sagas';
{{/if}}
{{#if wantActionsAndReducer}}
import { selectTest } from './selectors';
// import { defaultAction } from './actions';
import reducer from './reducer';
{{/if}}

import styles from './styles';

export class {{ properCase name }} extends {{{ type }}} { // eslint-disable-line
  // constructor(props) {
  //   super(props);
  //   this.state = {
  //   };
  // }
  //
  // componentWillMount() {
  // }
  //
  // componentWillReceiveProps(nextProps) {
  // }
  //
  // componentDidMount() {
  // }
  //
  // componentWillUnmount() {
  // }

  // onClick = () => {
  // }

  render() {
    const { test } = this.props;
    return (
      <Container>
        {{#if wantHeader}}
        <AppHeader title="{{titleCase name}}" />
        {{/if}}

        <Content
          contentContainerStyle={styles.contentContainer}
          style={styles.content}
        >
          <Text style={styles.generateText}>{test}</Text>
          <Text>This page is generated by the generator</Text>
          <Text>此页面由生成器生成</Text>
        </Content>

        {{#if wantFooter}}
        <AppFooter pageName="{{properCase name}}" />
        {{/if}}
      </Container>
    );
  }
}

{{ properCase name }}.defaultProps = {
  test: '',
};

{{ properCase name }}.propTypes = {
  test: PropTypes.string,
};


{{#if wantActionsAndReducer}}
const mapStateToProps = createPropsSelector({
  // write your code like this
  test: selectTest,
});

{{/if}}
const mapDispatchToProps = (dispatch) => ({
  dispatch,
});

{{#if wantActionsAndReducer}}
const withConnect = connect(mapStateToProps, mapDispatchToProps);

const withReducer = injectReducer({ key: '{{ camelCase name }}', reducer });

{{else}}
const withConnect = connect(null, mapDispatchToProps);

{{/if}}
{{#if wantSaga}}
const withSagas = sagas.map((saga) => injectSaga(saga));
{{/if}}

export default compose(
{{#if wantActionsAndReducer}}
  withReducer,
{{/if}}
{{#if wantSaga}}
  ...withSagas,
{{/if}}
  withConnect,
)({{ properCase name }});
