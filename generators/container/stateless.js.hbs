/**
 *
 * {{properCase name }} Stateless Container
 *
 */

import React from 'react';
import PropTypes from 'prop-types';
// import { Actions } from 'react-native-router-flux';
import { compose } from 'redux';
import { connect } from 'react-redux';
{{#if wantActionsAndReducer}}
import { createPropsSelector } from 'reselect-immutable-helpers';
{{/if}}
import {
  Container,
  Content,
  Text,
  View,
} from 'native-base';
{{#if wantHeader}}

import AppHeader from 'components/AppHeader';
{{/if}}
{{#if wantFooter}}
{{#if wantHeader}}
{{else}}

{{/if}}
import AppFooter from 'components/AppFooter';
{{/if}}
{{#if wantActionsAndReducer}}

// import injectReducer from 'utils/injectReducer';
{{/if}}
{{#if wantSaga}}
{{#if wantActionsAndReducer}}
{{else}}

{{/if}}
import injectSaga from 'utils/injectSaga';
{{/if}}
{{#if wantTransLate}}

import { translate } from 'utils/helpers';
{{/if}}
{{#if wantActionsAndReducer}}

// import { selector } from '../sourceFile/selectors';
// import reducer from '../sourceFile/reducer';
{{/if}}
{{#if wantSaga}}

import sagas from './sagas';
{{/if}}

import styles from './styles';

function {{ properCase name }}(props) {
  const { generate } = props;
  return (
    <Container>
      {{#if wantHeader}}
      <AppHeader title="{{titleCase name}}" />

      {{/if}}
      <Content
        contentContainerStyle={styles.contentContainer}
        style={styles.content}
      >
        <View style={styles.contentView}>
          {{#if wantTransLate}}
          <Text style={styles.generateText}>{translate(generate)}</Text>
          <Text style={styles.generateText}>{translate('generatorMessage')}</Text>
          {{else}}
          <Text style={styles.generateText}>{generate}</Text>
          <Text style={styles.generateText}>This page is generated by the generator</Text>
          <Text style={styles.generateText}>此页面由生成器生成</Text>
          {{/if}}
        </View>
      </Content>
      {{#if wantFooter}}

      <AppFooter pageName="{{properCase name}}" />
      {{/if}}
    </Container>
  );
}

{{ properCase name }}.defaultProps = {
  generate: 'welcome',
};

{{ properCase name }}.propTypes = {
  generate: PropTypes.string,
};

{{#if wantActionsAndReducer}}
const mapStateToProps = createPropsSelector({
  // write your code like this
  // test: selectTest,
});

{{/if}}
const mapDispatchToProps = (dispatch) => ({
  // Write your action code here
  dispatch,
});

{{#if wantActionsAndReducer}}
const withConnect = connect(mapStateToProps, mapDispatchToProps);

// const withReducer = injectReducer({ key: '{{ camelCase name }}', reducer });

{{else}}
const withConnect = connect(null, mapDispatchToProps);

{{/if}}
export default compose(
{{#if wantActionsAndReducer}}
  // withReducer,
{{/if}}
  withConnect,
)({{ properCase name }});
