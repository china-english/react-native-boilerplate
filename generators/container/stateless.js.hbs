/**
 *
 * {{properCase name }} Stateless Container
 *
 */

import React from 'react';
// import PropTypes from 'prop-types';
{{#if wantHeaders}}
{{#if wantMessages}}
import { injectIntl, intlShape } from 'react-intl';
{{/if}}
{{/if}}
import { connect } from 'react-redux';
import { compose } from 'redux';
{{#if wantHeaders}}
import { Helmet } from 'react-helmet';
{{/if}}
{{#if wantActionsAndReducer}}
import { createPropsSelector } from 'reselect-immutable-helpers';
import injectReducer from 'utils/injectReducer';
{{/if}}
{{#if wantSaga}}
import injectSaga from 'utils/injectSaga';
{{/if}}
// import classNames from 'classnames';

// import { } from 'utils/helpers';
// import { } from 'containers/src/selectors';
// import Loader from 'components/Loader';
{{#if wantMessages}}
import TranslatedMessage{{#if wantHeaders}}, { formatMessage }{{/if}} from 'components/TranslatedMessage';
{{/if}}
// import xxxComponent from './components/xxxComponent';
// import { DEFAULT_ACTION } from './constants';
// import { xxxAction } from './actions';
{{#if wantActionsAndReducer}}
import select{{properCase name}} from './selectors';
import reducer from './reducer';
{{/if}}
{{#if wantSaga}}
import sagas from './sagas';
{{/if}}
{{#if wantMessages}}
import messages from './messages';
{{/if}}
import './style.scss';

function {{ properCase name }}({{#if wantHeaders}}{{#if wantMessages}}props{{/if}}{{/if}}) {
  {{#if wantHeaders}}
  {{#if wantMessages}}
  const { intl } = props;
  {{/if}}
  {{else}}
  // const {  } = this.props;
  {{/if}}
  // const divClassName = classNames({
  //  'is-show': true,
  // });

  return (
    <div className="{{ kebabCase name }} page-container">
    {{#if wantHeaders}}
      <Helmet
      {{#if wantMessages}}
        title={formatMessage(intl, messages, '{{ camelCase name }}')}
      {{else}}
        title="{{ properCase name }}"
      {{/if}}
        meta={{curly true}}[
          {{curly true}} name: 'description', content: 'Description of {{properCase name}}' {{curly}},
        ]{{curly}}
      />

    {{/if}}
    {{#if wantMessages}}
      <TranslatedMessage messages={messages} messageId="header" />
    {{/if}}
    </div>
  );
}

{{ properCase name }}.defaultProps = {
// id: 1,
};

{{ properCase name }}.propTypes = {
  // dispatch: PropTypes.func.isRequired,
  {{#if wantHeaders}}
  {{#if wantMessages}}
  intl: intlShape.isRequired,
  {{/if}}
  {{/if}}
};

{{#if wantActionsAndReducer}}
const mapStateToProps = createPropsSelector({
  {{ camelCase name }}: select{{properCase name}}(),
});

{{/if}}
function mapDispatchToProps(dispatch) {
  return {
    dispatch,
  };
}

{{#if wantActionsAndReducer}}
const withConnect = connect(mapStateToProps, mapDispatchToProps);

const withReducer = injectReducer({ key: '{{ camelCase name }}', reducer });

{{else}}
const withConnect = connect(null, mapDispatchToProps);

{{/if}}
{{#if wantSaga}}
const withSagas = sagas.map((saga) => injectSaga(saga));
{{/if}}

export default compose(
{{#if wantActionsAndReducer}}
  withReducer,
{{/if}}
{{#if wantSaga}}
  ...withSagas,
{{/if}}
  withConnect,
{{#if wantHeaders}}
{{#if wantMessages}}
  injectIntl,
{{/if}}
{{/if}}
)({{ properCase name }});
